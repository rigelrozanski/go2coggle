package cmd

import (
	"fmt"
	//"io/ioutil"
	"os"
	p "path"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
)

var RootCmd = &cobra.Command{
	Use:   "wb",
	Short: "read whiteboard",
	Run:   rootRun,
}

func init() {
}

var out string     //holds coggle data as a string
var rootDir string //working p of the

func rootRun(cmd *cobra.Command, args []string) {

	curPath, err := filepath.Abs("")
	if err != nil {
		fmt.Println(err.Error())
	}

	coggleFileName := p.Base(curPath) + ".txt"

	rootDir = p.Dir(curPath)
	//loop through all the files
	err = filepath.Walk(curPath, visit)
	if err != nil {
		fmt.Println(err.Error())
	}

	fmt.Println(out)
	//write final output to file
	//err = ioutil.WriteFile(coggleFileName, []byte(""), 0644)
	//if err != nil {
	//	fmt.Println(err.Error())
	//}

	//cmd output
	txtOutPath := p.Join(curPath, coggleFileName)
	fmt.Println("New coggle file written to : \n" + txtOutPath)
}

func visit(path string, f os.FileInfo, err error) error {
	if strings.Contains(path, ".git") {
		return nil
	}
	working := strings.Replace(path, rootDir, "", 1)
	workingIsFile, err := isFile(working)
	if err != nil {
		return err
	}

	if workingIsFile && !strings.Contains(working, ".git") {
		return nil
	}

	//generate appropriate tabs
	var newLine string
	for i := 0; i < strings.Count(working, "/")-1; i++ {
		newLine += "\t"
	}

	//add final element
	newLine += p.Base(path)

	out += newLine + "\n"

	return nil
}

func isFile(path string) (bool, error) {
	fi, err := os.Stat(path)
	if err != nil {
		return true, err
	}

	switch mode := fi.Mode(); {
	case mode.IsDir():
		return false, nil
	case mode.IsRegular():
		return true, nil
	}
}
